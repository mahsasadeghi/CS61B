Well, you could use depth first search to find a random wall, mark it as false, and since depth first search will mark that wall as visited, it wont visit it again. So pair that with an internal way of marking walls as "exists" or not, you should never run into any cycles. Doing it this way would eliminate the need for doing these DisJointSet shenanigans. And the thing about random numbers putting a wall in there twice, well all you do is like I said, have an internal way of marking a wall object as "Exists" or not, which is what I did in this homework assignment anyway, so when a wall "exists" we can tear it down, otherwise we cannot.
